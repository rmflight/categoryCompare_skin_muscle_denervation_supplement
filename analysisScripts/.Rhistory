r
glist[[1]]
glist[[2]]
r2 = rankMatrix(glist, full=T)
r2
apply(r2, 1, function(x){})
apply(r2, 1, function(x){print(x)})
rhoScores(r2[1,])
rhoScores(r2[2,])
apply(r2, 1, function(x){rhoScores(x)})
debug(aggregateRanks)
aggregateRanks(rmat=r2)
n
N
a
ls()
rmat
rT <- rmat[1,]
betaScores(rT)
Q
debug(rhoScores)
aggregateRanks(rmat=r2)
n
x
rho
Q
debug(correctBetaPvalues)
debug(aggregateRanks::correctBetaPvalues)
debug(RobustRankAggreg::correctBetaPvalues)
debug(RobustRankAggreg:::correctBetaPvalues)
?pbeta
x <- seq(0, 1, length=21)
dbeta(x, 1, 1)
x
source("http://bioconductor.org/biocLite.R")
biocLite("RCytoscape")
biocLite("RCytoscape")
library(categoryCompare)
data(ccData)
?ccOutCyt
ccResults$BP <- breakEdges(ccResults$BP, 0.8)
cwObj <- ccOutCyt(ccResults$BP,ccOpts)
breakEdges(cwObj, 0.85)
install.packages("colorspace")
library(categoryCompare)
data(ccData)
names(geneLists[[1]])
geneLists <- geneLists[[1]]
geneLists <- new("ccGeneList", geneLists, ccType="BP")
names(geneLists)
?ccGeneList
g10 <- (unique(table10$Entrez[1:100]))
list10 <- list(genes=g10, universe=gUniverse, annotation="org.Hs.eg.db")
geneLists <- new("ccGeneList", list10, ccType="BP")
options(error=recover())
options(error=recover
)
geneLists <- new("ccGeneList", list10, ccType="BP")
geneLists <- list(test1=list10)
names(geneLists)
geneLists[[1]]
geneLists <- new("ccGeneList", geneLists, ccType="BP")
geneLists
fdr(geneLists) <- 0
enrichGenes <- ccEnrich(geneLists)
library(GO.db)
enrichGenes <- ccEnrich(geneLists)
ccOpt <- new("ccOptions", listNames="list10", outType="none")
compGenes <- ccCompare(enrichGenes, ccOpt)
ccOpt <- new("ccOptions", listNames="test1", outType="none")
compGenes <- ccCompare(enrichGenes, ccOpt)
compGenes
names(compGenes)
compGenes$BP <- breakEdges(compGenes$BP, 0.8)
ccBP <- ccOutCyt(compGenes$BP, ccOpt, rpcPort=9002)
ccOpt
graphType(enrichGenes) <- "hierarchical"
compGenes2 <- ccCompare(enrichGenes, ccOpt)
ccBP <- ccOutCyt(compGenes2$BP, ccOpt, postText="t2", rpcPort=9002)
library("org.Hs.eg.db")
library("categoryCompare")
library("GO.db")
library("KEGG.db")
load('geneList4cateCompare.rdata')
install.packages("colorspace")
library(GenomicRanges)
library(devtools)
?install_github
has_devel()
install_github("ggplot2")
load("H:/datasets/NASA Project/dazhou_analysis/nasaRadiation/limmaRst/limmaRst_Mar29_2012.rdata")
a_aggRank
a_aggRank[1,2]
head(a_aggRank[1,2])
length(a_aggRank[1,2])
length(a_aggRank[[1,2]])
head(a_aggRank[[1,2]][[1]])
head(a_aggRank[[1,2]])
briefDiscript
a_aggRank
l_aggRank_gy[[1]]
head(l_aggRank_gy[[1]])
head(l_aggRank_hr[[1]])
head(l_aggRank_hr[[2]])
head(l_aggRank_hr[[3]])
library(org.Hs.eg.db)
mget("ENST00000373712", org.Hs.egENSEMBL2EG)
mget("ENST00000373712", org.Hs.egENSEMBL2EG)
mget("ENST00000330964", org.Hs.egENSEMBL2EG)
mget("ENST00000293195", org.Hs.egENSEMBL2EG)
mget("ENSG00000221855", org.Hs.egENSEMBL2EG)
mget("ENST00000408916", org.Hs.egENSEMBL2EG)
svgFile <- "H:/datasets/categoryCompare_publicationData/skin_muscle_refocus/ccBP_001_5.svg"
fileCon <- file(svgFile, open="r+")
svgText <- readLines(fileCon)
close(fileCon)
head(svgText)
head(svgText, 20)
svgText[20:40]
svgFile <- "H:/datasets/categoryCompare_publicationData/skin_muscle_refocus/testImage.svg"
fileCon <- file(svgFile, open="r+")
svgText <- readLines(fileCon)
close(fileCon)
hasText <- grep("<text", svgText, fixed=TRUE)
notThis <- "DE\\."
baseName <- substr(svgFile, 1, nchar(svgFile)-4)
outName <- paste(baseName, "noText.svg", sep="_")
fileCon <- file(svgFile, open="r+")
svgText <- readLines(fileCon)
close(fileCon)
hasNot <- grep(notThis, svgText)
hasNot
svgText[4440]
hasText <- grep("<text", svgText, fixed=TRUE)
keepSVG <- rep(TRUE, length(svgText))
keepSVG[hasText] <- FALSE
keepSVG[hasNot] <- TRUE
svgText <- svgText[keepSVG]
fileOut <- file(outName, open="w+")
writeLines(svgText, fileOut)
close(fileOut)
svgFile <- "H:/datasets/categoryCompare_publicationData/skin_muscle_refocus/ccBP_001_5_descStr.svg"
notThis <- "DE\\."
baseName <- substr(svgFile, 1, nchar(svgFile)-4)
outName <- paste(baseName, "noText.svg", sep="_")
fileCon <- file(svgFile, open="r+")
svgText <- readLines(fileCon)
close(fileCon)
hasNot <- grep(notThis, svgText)
hasNot
svgText[hasNot]
hasText <- grep("<text", svgText, fixed=TRUE)
keepSVG <- rep(TRUE, length(svgText))
keepSVG[hasText] <- FALSE
keepSVG[hasNot] <- TRUE
keepSVG[2630]
install.packages("igraph")
install.packages("devtools")
install.packages("ROxygen2")
install.packages("roxygen2")
source("http://bioconductor.org/biocLite.R")
biocLite("categoryCompare")
library(BiocInstaller)
.libPaths()
source("http://bioconductor.org/biocLite.R")
library(BiocInstaller)
?useDevel
useDevel(TRUE)
biocLite("categoryCompare")
install.packages("devtools")
install.packages("markdown")
install.packages("markdown")
library(categoryCompare)
?categoryCompare
library(BiocInstaller)
biocLite("survival")
biocLite("survival")
options()
?save
options()
options()
options(browser)
options()
?save
options
options()
options(markdown.HTML.options=NULL)
options()
options(markdown.HTML.options)
options(markdown.HTML.options=markdownHTMLOptions())
library(markdown)
options(markdown.HTML.options=NULL)
options()
library(markdown)
options()
options()
options(markdown.HTML.options=c("hard_wrap","use_xhtml","smartypants"))
options
options()
library(markdown)
options
options()
?require
library(markdown, logical.return=T)
install.packages("snowfall")
library(snowfall)
?snowfall
sfInit( parallel=TRUE, cpus=2 )
if( sfParallel() )
cat( "Running in parallel mode on", sfCpus(), "nodes.\n" )
else
cat( "Running in sequential mode.\n" )
# Define some global objects.
globalVar1 <- c( "a", "b", "c" )
globalVar2 <- c( "d", "e" )
globalVar3 <- c( 1:10 )
globalNoExport <- "dummy"
calculate <- function( x ) {
cat( x )
return( 2 ^ x )
}
sfExportAll( except=c( "globalNoExport" ) )
sfClusterEvalQ( ls() )
cat( unlist( sfLapply( globalVar3, calculate ) ) )
sfInit(parallel=TRUE, cpus=2)
require(mvna)
data(sir.adm)
sfExport("sir.adm", local=FALSE)
sfLibrary(cmprsk)
wrapper <- function(a) {
index <- sample(1:nrow(sir.adm), replace=TRUE)
temp <- sir.adm[index, ]
fit <- crr(temp$time, temp$status, temp$pneu, failcode=1, cencode=0)
return(fit$coef)
}
result <- sfLapply(1:100, wrapper)
mean( unlist( rbind( result ) ) )
sfStop()
install.packages(mvna)
install.packages("mvna")
sfInit(parallel=TRUE, cpus=2)
require(mvna)
data(sir.adm)
sfExport("sir.adm", local=FALSE)
sfLibrary(cmprsk)
wrapper <- function(a) {
index <- sample(1:nrow(sir.adm), replace=TRUE)
temp <- sir.adm[index, ]
fit <- crr(temp$time, temp$status, temp$pneu, failcode=1, cencode=0)
return(fit$coef)
}
result <- sfLapply(1:100, wrapper)
mean( unlist( rbind( result ) ) )
sfStop()
install.packages("cmprsk")
sfInit(parallel=TRUE, cpus=2)
require(mvna)
data(sir.adm)
sfExport("sir.adm", local=FALSE)
sfLibrary(cmprsk)
wrapper <- function(a) {
index <- sample(1:nrow(sir.adm), replace=TRUE)
temp <- sir.adm[index, ]
fit <- crr(temp$time, temp$status, temp$pneu, failcode=1, cencode=0)
return(fit$coef)
}
result <- sfLapply(1:100, wrapper)
mean( unlist( rbind( result ) ) )
sfStop()
result
?time
?diff.Date
Sys.time
Sys.time()
date()
t1 <- Sys.time()
t2 <- Sys.time()
diff(t1, t2)
?diftime
difftime(t1, t2)
library(knitr)
?knitr
setwd("G:/robert/Dropbox/categoryCompareSubmission/analysisScripts/")
source("useful_utilities.r")
source("resaveImages.r")
library(org.Rn.eg.db)
library(org.Mm.eg.db)
library(rat2302.db)
library(GO.db)
library(KEGG.db)
library(categoryCompare)
library(graph)
library(RCytoscape)
load('skinData.RData') # Rat skin data
load('muscleData.RData') # Mouse muscle data
difProbes_T7vT0$Entrez <- getAnnData(difProbes_T7vT0$ID,annPackage='rat2302.db',type='ENTREZID')
difProbes_T14vT0$Entrez <- getAnnData(difProbes_T14vT0$ID,annPackage='rat2302.db',type='ENTREZID')
difProbes_T7vT0 <- dupCons(difProbes_T7vT0,'Entrez','logFC','adj.P.Val','min')
difProbes_T14vT0 <- dupCons(difProbes_T14vT0, 'Entrez', 'logFC', 'adj.P.Val', 'min')
outDat <- dupCons(outDat,'Entrez','denvinn.logFC','denvinn.Adj.P.Value','min')
source('homologene_data/homoLookup.r')
homoDat <- homoLookup(10090,10116)
musEntrez <- outDat$Entrez
musHasHomo <- musEntrez %in% homoDat$'10090'
musEntrez <- musEntrez[musHasHomo]
outDat <- outDat[musHasHomo,]
homoFilterConver <- function(datTable,fromSpec,toSpec){
tmpEntrez <- datTable$Entrez
tmpFilt <- tmpEntrez %in% (homoDat[[fromSpec]])
datTable <- datTable[tmpFilt,]
tmpEntrez <- tmpEntrez[tmpFilt]
fromTo <- homoDat[[toSpec]][match(tmpEntrez, homoDat[[fromSpec]])]
datTable$Entrez <- as.character(fromTo)
return(datTable)
}
difProbes_T7vT0 <- homoFilterConver(difProbes_T7vT0,'10116','10090')
difProbes_T14vT0 <- homoFilterConver(difProbes_T14vT0,'10116','10090')
# because we converted to mouse homologs, we need to filter out duplicates again in the rat data
difProbes_T7vT0 <- dupCons(difProbes_T7vT0,'Entrez','logFC','adj.P.Val','min')
difProbes_T14vT0 <- dupCons(difProbes_T14vT0, 'Entrez', 'logFC', 'adj.P.Val', 'min')
pCut <- 0.01
# for both data sets, just take a q-value (adj.p.value) cutoff and work with that
dif.dn.skinT7 <- unique(difProbes_T7vT0$Entrez[(difProbes_T7vT0$adj.P.Val <= pCut) & (difProbes_T7vT0$logFC < 0)])
dif.up.skinT7 <- unique(difProbes_T7vT0$Entrez[(difProbes_T7vT0$adj.P.Val <= pCut) & (difProbes_T7vT0$logFC >= 0)])
dif.dn.skinT14 <- unique(difProbes_T14vT0$Entrez[(difProbes_T14vT0$adj.P.Val <= pCut) & (difProbes_T14vT0$logFC < 0)])
dif.up.skinT14 <- unique(difProbes_T14vT0$Entrez[(difProbes_T14vT0$adj.P.Val <= pCut) & (difProbes_T14vT0$logFC >= 0)])
universe.skin <- unique(union(difProbes_T7vT0$Entrez, difProbes_T14vT0$Entrez))
dif.dn.musc <- unique(outDat$Entrez[(outDat$denvinn.Adj.P.Value <= pCut) & (outDat$denvinn.logFC < 0)])
dif.up.musc <- unique(outDat$Entrez[(outDat$denvinn.Adj.P.Value <= pCut) & (outDat$denvinn.logFC >= 0)])
universe.musc <- unique(outDat$Entrez)
# define the gene lists for use in categoryCompare
ccGenes <- list(skin.T7.DN=list(genes=dif.dn.skinT7,
universe=universe.skin,
annotation="org.Mm.eg.db"),
skin.T7.UP=list(genes=dif.up.skinT7,
universe=universe.skin,
annotation="org.Mm.eg.db"),
skin.T14.DN=list(genes=dif.dn.skinT14,
universe=universe.skin,
annotation="org.Mm.eg.db"),
skin.T14.UP=list(genes=dif.up.skinT14,
universe=universe.skin,
annotation="org.Mm.eg.db"),
muscle.DN=list(genes=dif.dn.musc,
universe=universe.musc,
annotation="org.Mm.eg.db"),
muscle.UP=list(genes=dif.up.musc,
universe=universe.musc,
annotation="org.Mm.eg.db"))
ccGenes <- new("ccGeneList", ccGenes)
fdr(ccGenes) <- 0 # this doesn't help for this data, so speed it up by setting to 0
ccType(ccGenes) <- c("BP","CC","MF","KEGG")
ccOpts <- new("ccOptions", listNames=names(ccGenes), outType="none")
doComp <- readLines(con=file("listMemberships.txt", open="r+"))
compareNames(ccOpts) <- doComp
saveDat(inList=c("ccGenes", "difProbes_T7vT0", "difProbes_T14vT0", "outDat"), file="ccInData", compress="xz")
ccRes <- ccEnrich(ccGenes)
pvalueType(ccRes) <- 'pval'
minCount(ccRes) <- 5
pvalueCutoff(ccRes) <- 0.001
ccRes2 <- ccRes
minCount(ccRes2) <- 5
pvalueCutoff(ccRes2) <- 0.01
ccComp2 <- ccCompare(ccRes2, ccOpts)
newComp2 <- findAllComps(ccComp2)
newComp2 <- newComp2[!(newComp2 %in% "NA")]
newComp2 <- newComp2[sample(length(newComp2), length(newComp2))]
ccOpts2_new <- new("ccOptions", listNames=names(ccGenes), compareNames=newComp2, outType="none")
ccComp2_new <- ccCompare(ccRes2, ccOpts2_new)
ccComp2_new$BP <- breakEdges(ccComp2_new$BP, 0.8)
findAllComps <- function(ccCompCol){
nType <- length(ccCompCol)
allComp <- sapply(ccCompCol, function(x){
tmpGraph <- x@mainGraph
allNodes <- nodes(tmpGraph)
unlist(unique(nodeData(tmpGraph, allNodes, "listMembership")))
})
allComp <- unique(unlist(allComp, use.names=F))
}
newComp2 <- findAllComps(ccComp2)
newComp2 <- newComp2[!(newComp2 %in% "NA")]
newComp2 <- newComp2[sample(length(newComp2), length(newComp2))]
ccOpts2_new <- new("ccOptions", listNames=names(ccGenes), compareNames=newComp2, outType="none")
newComp2
ccRes2
ccRes
pvalueType(ccRes2$BP)
pvalueType(ccRes$BP)
pvalueCutoff(ccRes2$BP)
pvalueCutoff(ccRes$BP)
ccComp <- ccCompare(ccRes, ccOpts)
newComp <- findAllComps(ccComp)
newComp
newComp2
newComp2[!(newComp2 %in% newComp)]
minCount(ccRes2) <- 2
pvalueCutoff(ccRes2) <- 0.01
ccComp2 <- ccCompare(ccRes2, ccOpts)
newComp2 <- findAllComps(ccComp2)
newComp2
pvalueCutoff(ccRes2) <- 0.001
ccComp2 <- ccCompare(ccRes2, ccOpts)
newComp2 <- findAllComps(ccComp2)
newComp2
minCount(ccRes2) <- 2
pvalueCutoff(ccRes2) <- 0.005
ccComp2 <- ccCompare(ccRes2, ccOpts)
newComp2 <- findAllComps(ccComp2)
newComp2
pvalueCutoff(ccRes2) <- 0.01
ccComp2 <- ccCompare(ccRes2, ccOpts)
newComp2 <- findAllComps(ccComp2)
newComp2
newComp2 <- newComp2[!(newComp2 %in% "NA")]
newComp2 <- newComp2[sample(length(newComp2), length(newComp2))]
ccOpts2_new <- new("ccOptions", listNames=names(ccGenes), compareNames=newComp2, outType="none")
ccComp2_new <- ccCompare(ccRes2, ccOpts2_new)
ccComp2_new$BP <- breakEdges(ccComp2_new$BP, 0.8)
ccBP2 <- ccOutCyt(ccComp2_new$BP, ccOpts2_new, "BP01.2")
newComp2
breakEdges(ccBP2, 1)
ccMF2 <- ccOutCyt(ccComp2_new$MF, ccOpts2_new, "MF01.2")
breakEdges(ccMF2, 0.8)
ccCC <- ccOutCyt(ccComp2_new$CC, ccOpts2_new, "CC01.2")
breakEdges(ccCC, 0.8)
ccKEGG2 <- ccOutCyt(ccComp2_new$KEGG, ccOpts2_new, "K01.2")
newCOmp2
newComp2
names(geneLists)
intersect(ccGenes$skin.T7.DN$genes, ccGenes$skin.T14.DN$genes)
mergGenes <- mergeLists(ccGenes, ccOpts)
head(mergGenes)
write.tab(mergGenes, file="geneLists.txt", sep="\t", row.names=FALSE)
write.table(mergGenes, file="geneLists.txt", sep="\t", row.names=FALSE)
geneListMem <- list(skin.T7.DN=dif.dn.skinT7,
skin.T7.UP=dif.up.skinT7,
skin.T14.DN=dif.dn.skinT14,
skin.T14.UP=dif.up.skinT14,
muscle.DN=dif.dn.musc,
muscle.UP=dif.up.musc)
ffOptions <- new("ccOptions", listNames=names(geneListMem),
compareNames=doComp, outType="none")
# Assign the genes to lists based on the comparisons previously defined for CCM
nodeCompVec <- categoryCompare:::.compMem(geneListMem,ffOptions)
listIDs <- unique(nodeCompVec)
listIDs <- sort(listIDs)
listIDs <- listIDs[listIDs != 0]
ffUniverse <- union(universe.skin, universe.musc)
ffGenes <- lapply(listIDs, function(x){
list(genes=names(nodeCompVec)[nodeCompVec == x], universe=ffUniverse, annotation="org.Mm.eg.db")
})
names(ffGenes) <- gsub(",", "..", doComp[listIDs])
ffGenes <- new("ccGeneList", ffGenes)
ccType(ffGenes) <- c("BP","CC","MF","KEGG")
fdr(ffGenes) <- 0
ffRes <- ccEnrich(ffGenes)
summary(ffRes$BP$skin.T7.UP..skin.T14.UP)
pvalueType(ffRes) <- "pval"
minCount(ffRes) <- 5
summary(ffRes$BP$skin.T7.UP..skin.T14.UP)
skinUp <- summary(ffRes$BP$skin.T7.UP..skin.T14.UP)
skinUp$Desc <- Term(skinUP$ID)
skinUp$Desc <- Term(skinU$ID)
skinUp$Desc <- Term(skinUp$ID)
skinUp
skinDn <- summary(ffRes$BP$skin.T7.DN..skin.T14.DN)
ffGenes$skin.T7.UP..skin.T14.UP
ffGenes
pvalueCutoff(ffRes) <- 0.01
minCount(ffRes) <- 2
skinUp <- summary(ffRes$BP$skin.T7.UP..skin.T14.UP)
skinUp$Desc <- Term(skinUp$ID)
skinUp
ccGenes
ccGenes2 <- ccGenes[1:4]
ccGenes3 <- ccGenes[1:4]
ccRes3 <- ccEnrich(ccGenes3)
ccGenes3 <- new("ccGeneList", ccGenes[1:4])
ccRes3 <- ccEnrich(ccGenes3)
ccOpts3 <- new("ccOpts", names(ccGenes3))
ccOpts3 <- new("ccOptions", names(ccGenes3))
ccOpts3 <- new("ccOptions", listNames = names(ccGenes3))
ccOpts3
showClass("ccOptions")
ccOpts3 <- new("ccOptions", listNames = names(ccGenes3), compareNames=c("skin.T7.DN",
"skin.T7.UP",
"skin.T14.DN",
"skin.T14.UP",
"skin.T7.DN,Skin.T14.DN",
"skin.T7.UP,skin.T14.UP",
"skin.T7.DN,skin.T14.UP",
"skin.T7.UP,skin.T14.DN"))
pvalueType(ccRes3) <- "pval"
pvalueCutoff(ccRes3) <- 0.01
minCount(ccRes3) <- 2
ccComp3 <- ccCompare(ccRes3, ccOpts)
warnings()
ccComp3
ccComp3$BP <- breakEdges(ccComp3$BP, 0.8)
ccComp3 <- ccCompare(ccRes3, ccOpts3)
ccComp3$BP <- breakEdges(ccComp3$BP, 0.8)
ccBP3 <- ccOutCyt(ccComp3$BP, ccOp)
ccBP3 <- ccOutCyt(ccComp3$BP, ccOpts3, "ccBP301.2")
skinUp
library(stats)
?fisher
fisher.test?
?fisher.test
?chisq.test
?pchisq
dchisq(1, df=1:3)
pchisq(1, df= 3)
